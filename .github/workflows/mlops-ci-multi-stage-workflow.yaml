name: MLOps CI Multi-Stage Workflow

on:
  push:
    branches:
    - main
  pull_request:
    branches:
      - main
  #  workflow_dispatch enable us to run the workflow manually
  workflow_dispatch:
    inputs:
      run_all:
        description: "Run all jobs"
        required: false
        default: "True"
      run_data_processing:
        description: "Run Data Processing"
        required: false
        default: "false"
      run_model_training:
        description: "Run Model Training"
        required: false
        default: "false"
      run_build_and_publish:
        description: "Run Build and Publish"
        required: false
        default: "false"
      # Runs on a release event on the main branch with a tag matching the pattern v.*.*.*
      # Uncomment the following lines to enable the release workflow
      # release:
      #   types: [created]
      #   branches: [main]
      #   tags: ['v.*.*.*']




jobs:
  data-processing:
    if: ${{ github.event.inputs.run_all == 'true' || github.event.inputs.run_data_processing == 'true' || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    # Define MLFlow as a service container. Actions will manage its lifecycle,
    # ensuring it's running and networked before the steps need it.

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout Repository
        uses: actions/checkout@v4

      # https://github.com/marketplace/actions/setup-python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # python --version
          python-version: '3.11.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # pip check fails on github actions
      # xgboost 1.7.5 is not supported on this platform
      # Error: Process completed with exit code 1.
      #      - name: Validate Python Dependencies
      #        run: |
      #          pip list | grep scikit-learn
      #          pip freeze | grep -f requirements.txt
      #          pip check

      # MLOps Specific steps
      - name: Data Validation
        run: |
          python src/data/run_processing.py \
            --output-file data/processed/cleaned_house_data2.csv \
            --input-file data/raw/house_data.csv

      - name: Feature Engineering
        run: |
          
          python src/features/engineer.py \
            --input data/processed/cleaned_house_data2.csv \
            --output data/processed/featured_house_data2.csv \
            --preprocessor models/trained/preprocessor.pkl
      
      - name: Upload Processed Data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/processed/featured_house_data2.csv
      
      - name: Uploaded Preprocessor
        uses: actions/upload-artifact@v4
        with:
          name: preprocessor
          path: models/trained/preprocessor.pkl

  model-training:
    if: ${{ github.event.inputs.run_all == 'true' || github.event.inputs.run_model_training == 'true' || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: data-processing
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # python --version
          python-version: '3.11.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download  Processed Data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data/processed/
      - name: Download Preprocessor
        uses: actions/download-artifact@v4
        with:
          name: preprocessor

      - name: Start MLflow Service
        run: |
          docker pull ghcr.io/mlflow/mlflow:latest 
          docker run \
            -d --name mlflow_server -p 5555:5000 \
            ghcr.io/mlflow/mlflow:latest \
            mlflow server \
              --host 0.0.0.0 \
              --backend-store-uri sqlite:///mlflow.db \
              --default-artifact-root /tmp/mlruns

      - name: Wait for MLflow service to be ready
        run: |
          # This step prevents the training job from starting before the tracking server is available.
          echo "Waiting for MLflow to be ready..."
          until $(curl --output /dev/null --silent --head --fail http://localhost:5555); do
            printf '.'
            sleep 5
          done
          echo "MLflow is up and running!"          

      - name: Model Training
        run: |
          python src/models/train_model.py \
          --config configs/model_config.yaml \
          --data data/processed/featured_house_data2.csv \
          --models-dir models \
          --mlflow-tracking-uri http://localhost:5555
      - name: Upload Trained Model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: models/

      - name: Stop MLflow Service
        run: |
          docker stop mlflow_server
          docker rm mlflow_server
          docker rmi ghcr.io/mlflow/mlflow:latest

  build_and_publish:
    if: ${{ github.event.inputs.run_all == 'true' || github.event.inputs.run_build_and_publish == 'true' || github.event_name != 'workflow_dispatch' }}
    needs: model-training
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Trained Model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: models/
      
      - name: Download Preprocessor
        uses: actions/download-artifact@v4
        with:
          name: preprocessor
          path: models/trained/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup short GIT SHA
        run:
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and Test House-Predictor-Service
        run: |
          docker build -t docker.io/${{vars.DOCKERHUB_USERNAME}}/house-price-predictor-service:${{env.GITHUB_SHA_SHORT}} \
           -f Dockerfile .
          docker run -p -d 8000:8000 --name test-service docker.io/${{vars.DOCKERHUB_USERNAME}}/house-price-predictor-service:${{env.GITHUB_SHA_SHORT}}
          for i in {1..10} do;
            curl -f http://localhost:8000/health && break || sleep 5
          done
          docker logs test-service

      - name: Clean up test-service
        run: |
          docker stop test-service || true
          docker rm test-service ||  true

      - name: Login into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image to Docker Hub
        run: |
          docker tag docker.io/${{vars.DOCKERHUB_USERNAME}}/house-price-predictor-service:latest
          docker push docker.io/${{vars.DOCKERHUB_USERNAME}}/house-price-predictor-service:latest
          docker push docker.io/${{vars.DOCKERHUB_USERNAME}}/house-price-predictor-service:{{env.GITHUB_SHA_SHORT}}
          

          
          

          

          
        


